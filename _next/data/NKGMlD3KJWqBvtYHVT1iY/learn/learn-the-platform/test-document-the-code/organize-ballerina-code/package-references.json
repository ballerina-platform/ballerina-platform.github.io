{"pageProps":{"frontmatter":{"layout":"ballerina-package-references-left-nav-pages-swanlake","title":"Package references","description":"The sections below include information about the structure of a package directory. It explains the purpose of each file in a package.","keywords":"ballerina, programming language, ballerina packages, package structure, package layout","permalink":"/learn/organize-ballerina-code/package-references/","active":"package-references","intro":"The sections below include information about the structure of a package directory. It explains the purpose of each file in a package.","redirect_from":["/learn/package-layout","/learn/package-layout/","/learn/package-references/","/learn/package-references/","/learn/organize-ballerina-code/package-references"]},"content":"\n## Package layout\n\n```bash\n.\n├── Ballerina.toml\n├── Dependencies.toml\n├── Package.md\n├── Module.md\n├── main.bal\n├── utils.bal\n├── tests/\n│     ├── main_tests.bal\n│     └── utils_tests.bal\n├── resources/\n│     └── app.png\n├── modules/\n│     ├── model/\n│     └── module1.test/\n└── target/\n```\n\n## The `Ballerina.toml` file\n\nThe `Ballerina.toml` identifies the directory as a Ballerina package. It contains all the meta information that are needed to build your package.\n\n>**Info:** The `[package]` table contains the meta information about the package.\n\n```toml\n[package]\norg = \"samjs\"\nname = \"winery\"\nversion = \"0.1.0\"\nexport = [\"winery\", \"winery.model\"]\n\n[build-options]\nobservabilityIncluded = true\n```\n\n### The `org` field\n\nThe organization is a logical name used for grouping modules together under a common namespace within a repository. Building a library package with `bal build -c` and pushing a library package into a repository will fail without an organization name.\n\n>**Info:** Organization names can only contain alphanumerics, underscore, and the maximum length is 256 characters.\n\nWhen you run the `bal new` command, the organization name will be set to the user name of your machine by default. You can choose to update the `Ballerina.toml` file to amend the organization name appropriately.\n\nAs described in [Organizations](/learn/publish-packages-to-ballerina-central/#organizations), the restrictions for the organization name of a package when publishing to [Ballerina Central](https://central.ballerina.io/) should also be considered before choosing an organization name.\n\n### The `name` field\n\nThe package name is an identifier used to refer to the package.\n\n>**Info:** The name can only contain alphanumerics, underscore, period, and the maximum length is 256 characters.\n\nIf the package name is not provided in the `Ballerina.toml` file, then, the current directory name is set as the package name. If there are any characters in the directory name mismatching the allowed regex, these will be replaced with the `_` character.\n\n#### Hierarchical package names\n\nWhen a package provides multiple functionalities, it is better to split it into multiple packages.  For scenarios like this, you can give a hierarchical name to the package.\n\nFor example, if you need to provide a set of APIs to communicate with AWS, you can choose to support APIs to AWS services using multiple packages such as `aws.s3`, `aws.sqs`, `aws.rds`, etc.\n\n#### The split module condition\n\nA split module condition occurs when the latest versions of two different packages contain the same module resulting in a build failure. When using hierarchical package names, ensure that the package repository does not hold another package containing a module with the same name in its latest version.\n\nFor example, follow the steps below if you created and published the `1.0.0` version of `aws.rds` package containing the `aws.rds.mysql` module to [Ballerina Central](https://central.ballerina.io/), and decide to move the `aws.rds.mysql` module to a separate package later.\n\n1. Push a new version (`1.0.1`) of the `aws.rds` package, which does not contain the `aws.rds.mysql` module\n2. Push the new `aws.rds.mysql` package\n\n### The `version` field\n\nBallerina strictly follows the rules of [Semantic Versioning](https://semver.org/). \n\n>**Info:** In general, follow the SemVer best practices when versioning a package.\n\n*   If the package is in the initial stages of development, label the package with the zero major version (`0.x.y`). This will give the hint that API changes are frequent and that the package is far from being production-ready.\n\n*   Use versions as three numeric parts `MAJOR.MINOR.PATCH` (e.g. `1.0.0`).\n    *   Increment the patch version when only backward compatible bug fixes are introduced.\n    *   Increment the minor version when new backward compatible functionality is introduced to the public API.\n    *   Increment the major version when any backward incompatible changes are introduced to the public API.\n\n*   When you are stabilizing the package to roll out to production, the pre-release versions are suitable for versioning (e.g. `1.0.0-alpha`).\n    * Pre-release versions are not considered production-ready. Even though it is not frequent compared to the initial development phase, API changes are possible.\n\n*   If the changes to pre-release versions are incremental, use the numeric pre-release versioning technique (e.g. `1.0.0-alpha.1`, `1.0.0-alpha.2`).\n\n*   Once the package is production-ready, use a stable version (e.g. `1.0.0`). Any subsequent minor or patch releases of the same major version should be backward compatible and should not break the existing builds.\n\n\n### Build options\n\nThe `[build-options]` table specifies the options that should be applied when building the package. You can provide build options in the `Ballerina.toml` instead of passing them to the `bal build` command.\n\nBallerina supports the build options below.\n\n```toml\n[build-options]\nobservabilityIncluded = true\noffline = true\nskipTests = true\ntestReport = true\ncodeCoverage = true\ncloud = \"k8s\"\n```\n\n### Platform dependencies\n\nWhen you compile a Ballerina package with `bal build`, the compiler creates an executable JAR file. However, if the package does not contain an entry point, it will produce a non-executable JAR file (a library package), which can be used in another package/program.\n\nIn both cases, the Ballerina compiler creates self-contained archives. There are situations in which you need to package JAR files with these archives.\n\n>**Info:** You can store the JAR files anywhere in your file system. As a best practice, maintain Java libraries inside the package. The platform-specific library information needs to be specified in the `Ballerina.toml` file. Java libraries are considered platform-specific.\n\n#### Specify the dependencies\n\nYou can specify dependencies as follows.\n\n1. Specify a JAR file dependency in the `Ballerina.toml` file as shown below.\n\n  ```toml\n  [[platform.java11.dependency]]\n  # Absolute or relative path of the JAR file.\n  path = \"<path-to-jar-file-1>\"\n  # An optional comma-separated list of Ballerina module names (to restrict the usage of this JAR).\n  modules = [\"<ballerina-module-1>\"]\n  ```\n\n2. Alternatively, specify Maven dependencies also as platform-specific libraries. These specified dependencies get resolved into the `target/platform-libs` directory when building the package. You can specify a Maven dependency in the `Ballerina.toml` file as shown below.\n\n  ```toml\n  [[platform.java11.dependency]]\n  # An optional comma-separated list of Ballerina module names (to restrict the usage of this JAR).\n  modules = [\"<ballerina-module-1>\"]\n  # Group ID of the Maven dependency.\n  groupId = \"<group-id>\"\n  # Artifact ID of the Maven dependency.\n  artifactId = \"<artifact-id>\"\n  # Version of the Maven dependency.\n  version = \"<version>\"\n  ```\n\n3. Specify a custom Maven repository in the `Ballerina.toml` file as shown below.\n\n  ```toml\n  [[platform.java11.repository]]\n  id = \"<maven-repository-id>\"\n  url = \"<maven-repository-url>\"\n  username = \"<maven-repository-username>\"\n  password = \"<maven-repository-password>\"\n  ```\n\n4. If your package has only the default root module, then you can attach all the JAR file dependencies to your default root module as the best practice.\n\n5. If your package is a Ballerina library package, then you should specify the JAR file dependencies in each Ballerina module if that module depends on the JAR file.\n\n>**Info:** The `bal build` packages all JARs specified in the `Ballerina.toml` file with the executable JAR file.\n\n## The `Dependencies.toml` file\n\nThe [`Dependencies.toml`](/learn/manage-dependencies/#specify-dependency-versions) file locks the versions of the dependencies to support repeatable builds.\n\n>**Info:** This file is auto-generated and managed by the Ballerina CLI. It does not need any intervention.\n\n## The `Package.md` file\n\nThe `Package.md` file provides a human-readable description of a package. This file is required for publishing a package to a repository. It is the first page you will see when you navigate to the package in [Ballerina Central](https://central.ballerina.io/).\n\n>**Info:** This file is in markdown format. It will be auto-generated when you create a library package. For steps to create a library package, see [Create a library package](/learn/publish-packages-to-ballerina-central/#create-a-library-package)\n\n## The `target/` directory\n\nThe `target/` directory contains artifacts generated by building a package.\n\n## The `resources/`, `tests/` directories, and `Module.md`\n\nThese are directories related to the default module. For detailed information, see [Module layout](/learn/package-references/#module-layout).\n\n## The `modules/` directory\n\nThis directory contains the other modules. The layout of this directory will be as follows.\n\n```bash\n.\n├── app.bal\n├── utils.bal\n├── tests/\n│     ├── main_tests.bal\n│     ├── utils_tests.bal\n│     └── resources/\n│           └── test_resource.json\n└── resources/\n      └── app.png\n```\n\n### Module directories\n\nThe root directory of the default module is the root of the package directory. The top-level `modules/` directory contains all the other modules. Each immediate subdirectory of the `modules/` directory becomes a Ballerina module. The subdirectory name becomes the module name. Therefore, the subdirectory name should be a valid Ballerina identifier.\n\n>**Info:** Module names can only contain alphanumerics, underscores, and periods and the maximum length is 256 characters. For the modules belonging to the same package, the value of the first identifier is the package name.\n\n```bash\n<package-name>[.<module-directory-name>]\n```\n\nYou can add other modules using the `bal add` command.\n\n```bash\nbal add util\n```\n\n### The `.bal` source files\n\nThe root of the module directory contains the source files of that module.\n\n\n>**Info:** The package sources are the `.bal` files in the `root` directory and `tests/` directory of the module. All other `.bal` files are treated as standalone Ballerina files.\n\n### The `Module.md` file\n\nThe `Module.md` file provides a human-readable description of a module. When you visit a package in [Ballerina Central](https://central.ballerina.io/), you should see all the exported modules of that package. It is the first page you will see when you navigate to an exported module of a package.\n\n### The `resources/` directory\n\nThe `resources/` directory stores all module resources such as images, default configs, etc.\n\n### The `tests/` directory\n\nThe `tests/` directory contains unit tests for the module and tests the module in isolation. The module-level test cases have access to the symbols with module-level visibility.\n\n<style> #tree-expand-all , #tree-collapse-all, .cTocElements {display:none;} .cGitButtonContainer {padding-left: 40px;} </style>\n\n \n","id":"package-references","sub":"test-document-the-code","third":"organize-ballerina-code","slug":"test-document-the-code/organize-ballerina-code/package-references"},"__N_SSG":true}